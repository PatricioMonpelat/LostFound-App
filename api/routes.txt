/user :
GET  "/findAll" : Retorna arreglo con todos los usuarios en la DB.

GET  "/userinfo" : JWT; Agarra el _id del usuario por medio del JWT y responde con el Document del user.

POST  "/register" : JWT; {name, email, profile_img } = req.body; Retorna el nuevo usuario creado en la DB.

GET  "/existsInDB" : JWT; Agarra el req.auth.sub del JWT, busca ese _id en la DB y responde {"msg": true / false} dependiendo si ese User _id ya existe o no en la DB.

PATCH  "/update": JWT; { name, profile_img } = req.body;  Retorna un objeto { name: 0/1, profile_img: 0/1, userUpdated: IUser }. El 0 o 1 representa si se actualizó esa propiedad o no.

DELETE "/destroyAll/:_id" : JWT; Borra toda la data asociada a un user _id en la collection User, Subscription y Post.


/post :
GET  "/findAll" : Retorna un arreglo con todos los posts en la collection Posts;

POST  "/newPost" : JWT; { name_on_doc, number_on_doc, country_found, date_found, blurred_imgs, comments, additional_contact_info } ; Crea un documento Post y también pushea el documento creado al arreglo userInDB.posts ; Retorna el nuevo Post.
EXTRA: Esta ruta, luego de la creación exitosa de un new Post, va a invocar a una función que chequea si alguna Subscription coincide con el nuevo Post y va a enviar emails avisando a las suscripciones que correspondan.

GET  "/search" : JWT; Realiza una búsqueda por query usando la aux fn searchPostsByQuery(req.query). Retorna un arreglo de Posts que matchearon con los valores enviados por req.query ; { name, number, country, date_lost } = req.query;

PATCH  "/:id" : JWT; Recibe por body props a actualizar (   name_on_doc: string;
  number_on_doc: string;
  country_found: string;
  date_found: any;
  blurred_imgs: string[];
  comments: string | undefined ) ; 
   el _id del post por req.params

GET  "/:_id" : JWT; Retorna un Post buscado por el req.params._id;

DELETE  "/:_id" : JWT;  Borra un Post en la Collection Post y en el arreglo de User.posts. Recibe por req.params._id el _id del Post.


/subscription :
GET  "/findAll" : Retorna un arreglo de Documentos de Subscription ;

POST  "/" : JWT; Crea un nuevo documento en la collection Subscription. {  name_on_doc, number_on_doc, country_lost, date_lost } = req.body ; Retorna el nuevo Documento creado en Subscription.

DELETE "/" : JWT;  Busca y borra subscriptions en el arreglo user.subscrition y en la collection Subscription. Retorna un obj con propiedades de cuántos elementos borró y mensajes (msg). 
    objToReturn = {
    userSubscriptions: { deleted: 0, msg: "" },
    subscriptionCollection: { deleted: 0, msg: "" },
    total: 0,
    msg: "",
  };

PATCH "/:subscription_id" : JWT;  {subscription_id} = req.params; Hace un update de una Subscription en la collection Subscription y en el array  user.subscriptions 
Retorna un obj: 
confirmationOfUpdate: {
    userSubscriptions: {
        updated: number;
        msg: string;
    };
    subscriptionCollection: {
        updated: number;
        msg: string;
    };
    total: number;
}

GET  "/userSubs" : JWT;  Retorna un arreglo con las Subscriptions del User